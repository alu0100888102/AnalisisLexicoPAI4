package Exports;
import static org.junit.Assert.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;
import org.junit.Test;

public class ALexicoTest {

	@Test
	public final void testTokens() {
		TablaTokens table = new TablaTokens();
		assertEquals(table.getToken("abstract"), "KWABSTRACT");
		assertEquals(table.getToken("assert"),"KWASSERT");
		assertEquals(table.getToken("boolean"),"KWBOOLEAN");
		assertEquals(table.getToken("break"),"KWBREAK");
		assertEquals(table.getToken("byte"),"KWBYTE");
		assertEquals(table.getToken("case"),"KWCASE");
		assertEquals(table.getToken("catch"),"KWCATCH");
		assertEquals(table.getToken("char"),"KWCHAR");
		assertEquals(table.getToken("class"),"KWCLASS");
		assertEquals(table.getToken("const"),"KWCONST");
		assertEquals(table.getToken("continue"),"KWCONTINUE");
		assertEquals(table.getToken("default"),"KWDEFAULT");
		assertEquals(table.getToken("do"),"KWDO");
		assertEquals(table.getToken("double"),"KWDOUBLE");
		assertEquals(table.getToken("else"),"KWELSE");
		assertEquals(table.getToken("extends"),"KWEXTENDS");
		assertEquals(table.getToken("false"),"KWFALSE");
		assertEquals(table.getToken("final"),"KWFINAL");
		assertEquals(table.getToken("finally"),"KWFINALLY");
		assertEquals(table.getToken("float"),"KWFLOT");
		assertEquals(table.getToken("for"),"KWFOR");
		assertEquals(table.getToken("goto"),"KWGOT");
		assertEquals(table.getToken("if"),"KWIF");
		assertEquals(table.getToken("implements"),"KWIMPLEMENTS");
		assertEquals(table.getToken("import"),"KWIMPORT");
		assertEquals(table.getToken("instanceof"),"KWINSTANCEOF");
		assertEquals(table.getToken("int"),"KWINT");
		assertEquals(table.getToken("interface"),"KWINTERFACE");
		assertEquals(table.getToken("long"),"KWLONG");
		assertEquals(table.getToken("native"),"KWNATIVE");
		assertEquals(table.getToken("new"),"KWNEW");
		assertEquals(table.getToken("package"),"KWPACKAGE");
		assertEquals(table.getToken("private"),"KWPRIVATE");
		assertEquals(table.getToken("protected"),"KWPROTECTED");
		assertEquals(table.getToken("public"),"KWPUBLIC");
		assertEquals(table.getToken("return"),"KWETURN");
		assertEquals(table.getToken("short"),"KWSHORT");
		assertEquals(table.getToken("static"),"KWSTATIC");
		assertEquals(table.getToken("super"),"KWSUPER");
		assertEquals(table.getToken("switch"),"KWSWITCH");
		assertEquals(table.getToken("synchronized"),"KWSYNCHRONIZED");
		assertEquals(table.getToken("this"),"KWTHIS");
		assertEquals(table.getToken("throw"),"KWTHROW");
		assertEquals(table.getToken("transient"),"KWTRANSIENT");
		assertEquals(table.getToken("true"),"KWTRUE");
		assertEquals(table.getToken("try"),"KWTRY");
		assertEquals(table.getToken("void"),"KWVOID");
		assertEquals(table.getToken("volatile"),"KWVOLATILE");
		assertEquals(table.getToken("while"),"KWWHILE");
		assertEquals(table.getToken(";"),"SEMICOLON");
		assertEquals(table.getToken(","),"COMMA");
		assertEquals(table.getToken("."),"PERIOD");
		assertEquals(table.getToken("("),"OPAR");
		assertEquals(table.getToken(")"),"CPAR");
		assertEquals(table.getToken("{"),"OBRACE");
		assertEquals(table.getToken("}"),"CBRACE");
		assertEquals(table.getToken("["),"OBRACK");
		assertEquals(table.getToken("]"),"CBRACK");
		assertEquals(table.getToken("+"),"ADDITION");
		assertEquals(table.getToken("-"),"SUBTRACTION");
		assertEquals(table.getToken("*"),"MULTIPLICATION");
		assertEquals(table.getToken("/"),"DIVISION");
		assertEquals(table.getToken("%"),"MODULUS");
		assertEquals(table.getToken("&"),"BIT_AND");
		assertEquals(table.getToken("|"),"BIT_OR");
		assertEquals(table.getToken("^"),"BIT_XOR");
		assertEquals(table.getToken("~"),"BIT_COMPLIMENT");
		assertEquals(table.getToken("&&"),"LOGI_CAND");
		assertEquals(table.getToken("||"),"LOGI_COR");
		assertEquals(table.getToken("!"),"LOGIC_NOT");
		assertEquals(table.getToken("<"),"LESS_THAN");
		assertEquals(table.getToken(">"),"GREATER_THAN");
		assertEquals(table.getToken("<="),"LESS_OR_EQTHAN");
		assertEquals(table.getToken(">="),"GT_OR_EQ_THAN");
		assertEquals(table.getToken("<<"),"LEFT_SHIFT");
		assertEquals(table.getToken(">>"),"RIGHT_SHIFT");
		assertEquals(table.getToken(">>>"),"Z_RIGHT_SHIFT");
		assertEquals(table.getToken("="),"ASSIGN");
		assertEquals(table.getToken("?"),"CONDITIONAL");
		assertEquals(table.getToken(":"),"CONDITIONAL");
		assertEquals(table.getToken("++"),"INCREMENT");
		assertEquals(table.getToken("--"),"DECREMENT");
		assertEquals(table.getToken("=="),"EQUAL_TO");
		assertEquals(table.getToken("+="),"ADD_ASSGN");
		assertEquals(table.getToken("-="),"SUB_ASSIGN");
		assertEquals(table.getToken("*="),"MULT_ASSIGN");
		assertEquals(table.getToken("/="),"DIV_ASSIGN");
		assertEquals(table.getToken("%="),"MOD_ASSIGN");
		assertEquals(table.getToken("&="),"BIT_AND_ASSIGN");
		assertEquals(table.getToken("|="),"BIT_OR_ASSIGN");
		assertEquals(table.getToken("^="),"BIT_XOR_ASSIGN");
		assertEquals(table.getToken("!="),"NOT_EQUAL_TO");
		assertEquals(table.getToken("<<="),"LEFT_SHIFT_ASSIGN");
		assertEquals(table.getToken(">>="),"RIGHT_SHIFT_ASSIGN");
		assertEquals(table.getToken(">>>="),"Z_RIGHT_SHIFT_ASSIGN");
		assertEquals(table.getToken("/*"),"COMMENT");
		assertEquals(table.getToken("/**"),"COMMENT");
		assertEquals(table.getToken("//"),"LINE_COMMENT");
		assertEquals(table.getToken("*/"),"END_COMMENT");
		assertEquals(table.getToken("1"),"INT");
		assertEquals(table.getToken("1.1"),"FLOAT");
		assertEquals(table.getToken("Holakase"),"ID");
		assertEquals(table.getToken("\"Holakase\""),"STRING");
		assertEquals(table.getToken("\"Holakase"),"UNFINISHED_STRING");
		assertEquals(table.getToken("3Hola-k.ase"),"TOKEN_ERROR");
		assertEquals(table.getToken(null),"TOKEN_ERROR");
	}
	
	@Test
	public final void testTokenize() {
		String cadena = "public (Hola =    9.2\"Baila baila\"); ";
		ArrayList<AlToken> testTokens = new ArrayList<AlToken>();
		testTokens.add(new AlToken(0,0,"KWPUBLIC","public"));
		testTokens.add(new AlToken(0,7,"OPAR","("));
		testTokens.add(new AlToken(0,8,"ID","Hola"));
		testTokens.add(new AlToken(0,13,"ASSIGN","="));
		testTokens.add(new AlToken(0,18,"FLOAT","9.2"));
		testTokens.add(new AlToken(0,21,"STRING","\"Baila baila\""));
		testTokens.add(new AlToken(0,34,"CPAR",")"));
		testTokens.add(new AlToken(0,35,"SEMICOLON",";"));
		ALexico test = new ALexico();
		assertEquals(test.tokenize(cadena, 0, new AtomicBoolean(false)), (testTokens));
	}

}
